\input texinfo   @c -*-texinfo-*-
@setfilename mpop.info
@set UPDATED July 1, 2007
@set UPDATED-MONTH July 2007
@set EDITION 1.0.11
@set VERSION 1.0.11
@settitle mpop @value{VERSION}

@c Define new indices: for options (op) and commands (cm)
@defcodeindex op
@defcodeindex cm

@finalout
@copying
This manual was last updated @value{UPDATED} for version
@value{VERSION} of mpop.

Copyright (C) 2005, 2006, 2007  Martin Lambers

@quotation
This program, including this manual,
is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program, including this manual,
is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
@end quotation
@end copying

@dircategory Individual utilities
@direntry
* mpop: (mpop).		A POP3 client.
@end direntry

@titlepage
@title mpop
@subtitle A POP3 client
@subtitle version @value{VERSION}, @value{UPDATED}
@author Martin Lambers (@email{marlam@@marlam.de})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top mpop
@insertcopying
@end ifnottex

@menu
* Introduction::			Basic concepts.
* Configuration file::			Configuration file commands.
* Invocation::				Command line options.
* POP3 features::			Explanation of various POP3 features.
* Mail retrieval mode::			How to retrieve mail.
* Filtering::				How to filter mails.
* Server information mode::		How to obtain information about 
					an POP3 server.
* Examples::				Usage examples.
* Development::				About the development process.
@end menu


@node Introduction
@chapter Introduction

mpop is a POP3 client. 

In its default mode of operation, it retrieves mails from one or more POP3
mailboxes, optionally does some filtering, and delivers them through a mail
delivery agent (MDA) or to maildir folders or mbox files. Mails that were 
successfully delivered before will not be retrieved a second time, even if
errors occur or mpop is terminated in the middle of a session.

The best way to start is probably to have a look at the Examples section.
@xref{Examples}.

In addition to the mail retrieval mode, mpop can be used in server information
mode. In this mode, mpop prints as much information as it can get about a given
POP3 server (greeting, supported features, login delay, maximum mail size, 
@dots{}).

Normally, a configuration file contains information about which POP3 server to
use and how to use it, but almost all settings can also be configured on the
command line.

POP3 server information is organized in accounts. Each account describes one 
POP3 server: host name, authentication settings, TLS settings, and so on.
Each configuration file can define multiple accounts.

Supported features include:
@itemize
@item Header based mail filtering: filter junk mail before downloading it
@item Delivery to mbox files, maildir folders or a mail delivery agent (MDA)
@item Very fast POP3 implementation, using command pipelining
@item Authentication methods USER/PASS, APOP, PLAIN, LOGIN and CRAM-MD5 (and
GSSAPI, DIGEST-MD5, and NTLM when GNU SASL is used)
@item TLS encrypted connections (including server certificate verification and
the possibility to send a client certificate)
@item Support for Internationalized Domain Names (IDN)
@item IPv6 support
@item support for multiple accounts
@end itemize


@node Configuration file
@chapter Configuration file

If it exists and is readable, a user configuration file will be loaded
(@code{~/.mpoprc} by default).  This file must have no more permissions
than user read/write.  Configuration file settings can be changed by command
line options.
					         
A configuration file is a simple text file. Empty lines and comment lines 
(whose first non-blank character is '#') are ignored. Every other line must 
contain a command and may contain an argument to that command.
The argument may be enclosed in double quotes (").

If the first character of a filename is the tilde (~), this tilde will be 
replaced by @code{$HOME}.

If a command accepts the argument @samp{on}, it also accepts an empty argument
and treats that as if it was @samp{on}.

Commands form groups. Each group starts with the @samp{account} command and
defines the settings for one POP3 server.

@xref{Examples}.

@section General commands

@table @samp
@anchor{defaults}
@item defaults
@cmindex defaults
Set defaults. The following configuration commands will set default values for
all following account definitions.
@anchor{account}
@item account @var{name} [ : @var{account}[,@dots{}] ]
@cmindex account
Start a new account definition with the given name. The current default values
are filled in (see @ref{defaults}).@*
If a colon and a list of previously defined accounts is given after the account
name, the new account, with the filled in default values, will inherit all 
settings from the accounts in the list.
@anchor{host}
@item host @var{hostname}
@cmindex host
The POP3 server to retrieve mails from.
The argument may be a host name or a network address.
Every account definition must contain this command.
@anchor{port}
@item port @var{number}
@cmindex port
The port that the POP3 server listens on. The default is 110, unless TLS without
STARTTLS is used, in which case it is 995.
@anchor{timeout}
@item timeout (off|@var{seconds})
@cmindex timeout
Set or unset a network timeout, in seconds. The default is 180 seconds. The 
argument @samp{off} means that no timeout will be set, which means that the
operating system default will be used.
@anchor{pipelining}
@item pipelining (auto|on|off)
@cmindex pipelining
Enable or disable POP3 pipelining. The default is @samp{auto}, which means that
mpop enables pipelining for POP3 servers that advertize this capability, and 
disables it for all other servers. @xref{Pipelining}.
@end table

@section Authentication commands

@xref{Authentication}.

@table @samp
@anchor{auth}
@item auth [(on|@var{method})]
@cmindex auth
This command chooses the POP3 authentication method. With the argument
@samp{on}, mpop will choose the best one available for you (see below). This is
the default.  Accepted methods are @samp{user}, @samp{apop}, @samp{plain}, 
@samp{cram-md5}, @samp{digest-md5}, @samp{gssapi}, @samp{external}, 
@samp{login}, and @samp{ntlm}. @xref{Authentication}.@*
@anchor{user}
@item user [@var{username}]
@cmindex user
Set your user name for POP3 authentication. An empty argument unsets the user
name.
@anchor{password}
@item password [@var{secret}]
@cmindex password
Set your password for POP3 authentication. An empty argument unsets the
password.
If no password is set but one is needed during authentication, mpop will try to
find it in @code{~/.netrc}, and if that fails, will prompt you for it.
@xref{Authentication}.
@anchor{ntlmdomain}
@item ntlmdomain [@var{ntlmdomain}]
@cmindex ntlmdomain
Set a domain for the @samp{ntlm} authentication method. The default is to use 
no domain (equivalent to an empty argument), but some servers seem to require 
one, even if it is an arbitrary string.
@end table

@section TLS commands

@xref{Transport Layer Security}.

@table @samp
@anchor{tls}
@item tls [(on|off)]
@cmindex tls
This command enables or disables TLS/SSL encrypted connections to the POP3
server. Not every server supports TLS, and many that support it require the
@samp{tls_starttls off} command.@*
To use TLS/SSL, it is required to either use the @samp{tls_trust_file} command
(highly recommended) or to disable @samp{tls_certcheck}. 
@xref{Transport Layer Security}.
@anchor{tls_starttls}
@item tls_starttls [(on|off)]
@cmindex tls_starttls
This command chooses the TLS/SSL variant: with STARTTLS (@samp{on}, default) or 
POP3-over-TLS (@samp{off}). Most servers support the latter variant, which is 
also commonly referred to as "POP3 with SSL".
@xref{Transport Layer Security}.
@anchor{tls_trust_file}
@item tls_trust_file [@var{file}]
@cmindex tls_trust_file
This command activates strict server certificate verification.
The given file must contain one or more certificates of trusted Certification 
Authorities (CAs) in PEM format.@*
On Debian based systems, you can install the @samp{ca-certificates} package and
use the file @file{/etc/ssl/certs/ca-certificates.crt}.@*
An empty argument disables this feature.
@xref{Transport Layer Security}.
@anchor{tls_key_file}
@item tls_key_file [@var{file}]
@cmindex tls_key_file
This command (together with the @samp{tls_cert_file}) command enables mpop to
send a client certificate to the POP3 server if requested.
The file must contain the private key of a certificate in PEM format.
An empty argument disables this feature.
@xref{Transport Layer Security}.
@anchor{tls_cert_file}
@item tls_cert_file [@var{file}]
@cmindex tls_cert_file
This command (together with the @samp{tls_key_file} command) enables mpop to
send a client certificate to the POP3 server if requested.
The file must contain a certificate in PEM format.
An empty argument disables this feature.
@xref{Transport Layer Security}.
@anchor{tls_certcheck}
@item tls_certcheck [(on|off)]
@cmindex tls_certcheck
This command enables or disables checks for the server certificate.@*
WARNING: When the checks are disabled, TLS/SSL sessions will be vulnerable to
man-in-the-middle attacks!
@xref{Transport Layer Security}.
@anchor{tls_force_sslv3}
@item tls_force_sslv3 [(on|off)]
@cmindex tls_force_sslv3
Force TLS/SSL version SSLv3. This might be needed to use SSL with some old and
broken servers. Do not use this unless you have to.
@xref{Transport Layer Security}.
@end table

@section Commands specific to mail retrieval mode

@xref{Mail retrieval mode}.

@table @samp
@anchor{delivery}
@item delivery @var{method} @var{method_arguments@dots{}}
@cmindex delivery
How to deliver messages received from this account.
@itemize
@item delivery mda @var{command}@*
Deliver the mails through a mail delivery agent (MDA).@*
All occurences of @code{%F} in the command will be replaced with the envelope
from address of the current message (or MAILER-DAEMON if none is found). Note
that this address is guaranteed to contain only letters @code{a-z} and
@code{A-Z}, digits @code{0-9}, and any of @code{.@@_-+/}, even though that is
only a subset of what is theoretically allowed in a mail address. Other
characters, including those interpreted by the shell, are replaced with
@code{_}. Nevertheless, you should put @code{%F} into single quotes:
@code{'%F'}.@*
Use @code{delivery mda "/usr/bin/procmail -f '%F' -d $USER"} for the procmail 
MDA.@*
Use @code{delivery mda "/usr/sbin/sendmail -oi -oem -f '%F' -- $USER"} to let
your MTA handle the mail.@*
Use @code{delivery mda /usr/local/bin/msmtp --host=localhost --from='%F' -- 
$USER@@`hostname`.`dnsdomainname`"} to pass the mail to your MTA via SMTP.
(This is what fetchmail does by default.)
@item delivery maildir @var{directory}@*
Deliver the mails to the given maildir directory. The directory must exist and 
it must be a valid maildir directory; mpop will not create directories.
@item delivery mbox @var{mbox-file}@*
Deliver the mails to the given file in mbox format. The file will be locked 
with @code{fcntl(2)}. mpop uses the MBOXRD mbox format variant; see the
documentation of the mbox format.
@end itemize
If the delivery method needs to parse the mail headers for an envelope from 
address (the mda method if the command contains @code{%F}, and the mbox method),
then it needs to create a temporary file to store the mail headers (but not the
body) in. See @code{$TMPDIR} in @ref{Environment / Files}.
@anchor{uidls_file}
@item uidls_file @var{filename}
@cmindex uidls_file
The file to store UIDLs in. These are needed to identify new messages.
@code{%U} in the filename will be replaced by the username of the current 
account. @code{%H} in the filename will be replaced by the hostname of the 
current account. If the filename contains directories that do not exist, mpop 
will create them. mpop locks this file for exclusive access when accessing the 
associated POP3 account.@*
The default value is @code{~/.mpop_uidls/%U_at_%H}. You can also use a single
UIDLS file for multiple accounts, but then you cannot poll more than one of
these accounts at the same time.
@anchor{only_new}
@item only_new [(on|off)]
@cmindex only_new
By default, mpop processes only new messages (new messages are those that were
not already successfully retrieved in an earlier session). If this option is 
turned off, mpop will process all messages.
@anchor{keep}
@item keep [(on|off)]
@cmindex keep
Keep all mails on the POP3 server, never delete them. The default behavior is
to delete mails that have been successfully delivered or filtered by kill 
filters.
@anchor{killsize}
@item killsize (off|@var{size})
@cmindex killsize
Mails larger than the given size will be deleted, not downloaded (unless the 
keep command is used, in which case they will just be skipped). The size 
argument must be zero or greater. If it is followed by a 'k' or an 'm', the 
size is measured in kilobytes/megabytes instead of bytes. Note that some POP3 
servers report slightly incorrect sizes for mails. @xref{Filtering}.
@anchor{skipsize}
@item skipsize (off|@var{size})
@cmindex skipsize
Mails larger than the given size will be skipped (not downloaded). The size 
argument must be zero or greater. If it is followed by a 'k' or an 'm', the 
size is measured in kilobytes/megabytes instead of bytes. Note that some POP3
servers report slightly incorrect sizes for mails. @xref{Filtering}.
@anchor{filter}
@item filter [@var{COMMAND}]
@cmindex filter
Set a filter which will decide whether to retrieve, skip, or delete each mail
by investigating the mail's headers. The POP3 server must support the POP3 TOP
command for this to work; see @ref{Server information mode}. An empty argument
disables filtering.@*
All occurences of @code{%F} in the command will be replaced with the envelope
from address of the current message (or MAILER-DAEMON if none is found).
Note that this address is guaranteed to contain only letters @code{a-z} and
@code{A-Z}, digits @code{0-9}, and any of @code{.@@_-+/}, even though that is
only a subset of what is theoretically allowed in a mail address. Other
characters, including those interpreted by the shell, are replaced with
@code{_}. Nevertheless, you should put @code{%F} into single quotes:
@code{'%F'}.@*
All occurences of @code{%S} in the command will be replaced with the size of
the current mail as reported by the POP3 server.@*
The mail headers (plus the blank line separating the headers from the body)
will be piped to the command. Based on the return code, mpop decides
what to do with the mail:
@itemize
@item 0: proceed normally; no special action
@item 1: delete the mail; do not retrieve it
@item 2: skip the mail; do not retrieve it
@end itemize
Return codes greater than or equal to 3 mean that an error occurred.  The
@code{sysexits.h} error codes may be used to give information about the kind of
the error, but this is not necessary. @xref{Filtering}.
@end table


@node Invocation
@chapter Invocation

@section Synopsis

@itemize
@item Mail retrieval mode (default):@*
@code{mpop [@var{option}@dots{}] [--] [@var{account}@dots{}]}@*
@item Server information mode:@*
@code{mpop [@var{option}@dots{}] --serverinfo [@var{account}@dots{}]}@*
@end itemize

@section Exit code

The standard exit codes from @code{sysexits.h} are used.

@anchor{Environment / Files}
@section Environment / Files
@table @samp
@item @code{~/.mpoprc}
The default user configuration file.
@item @code{~/.mpop_uidls}
Default directory to store UIDLs files in.
@item @code{~/.netrc}
The @code{.netrc} file contains login information. If a password is not found 
in the configuration file, msmtp will search it in @code{.netrc} before 
prompting the user for it. The syntax of @code{.netrc} is described in the 
@code{netrc(5)} or @code{ftp(1)} manual page.
@item @code{$USER}, @code{$LOGNAME}
These variables override the user's login name. @code{$LOGNAME} is only used if
@code{$USER} is unset. The user's login name is used for @code{Received} 
headers.
@item @code{$TMPDIR}
Directory to create temporary files in. If this is unset, a system specific
default directory is used.@*
@end table

@section Options
Options override configuration file settings. The following options are 
accepted:

@subsection General options
@table @samp
@item --version
@opindex --version
Print version information. This includes information about the library used for
TLS/SSL support (if any), the library used for authentication, and the
authentication mechanisms supported by this library.
@item --help
@opindex --help
Print help.
@item -P
@itemx --pretend
@opindex -P
@opindex --pretend
Print the configuration settings that would be used, but do not take further
action.  An asterisk ('*') will be printed instead of the password.
@item -d
@itemx --debug
@opindex -d
@opindex --debug
Print lots of debugging information, including the whole conversation with the
POP3 server. Be careful with this option: the (potentially dangerous) output 
will not be sanitized, and your password may get printed in an easily decodable
format!@*
This option implies @samp{--quiet}, because the debugging output would otherwise
interfere with the normal output.
@end table

@subsection Changing the mode of operation
@table @samp
@anchor{--serverinfo}
@item -S
@itemx --serverinfo
@opindex -S
@opindex --serverinfo
Print information about the POP3 server and exit. This includes information
about supported features (pipelining, authentication methods, TOP command,
@dots{}), about parameters (time for which mails will not be deleted, minimum
time between logins, @dots{}), and about the TLS certificate (if TLS is
active).
@xref{Server information mode}.
@end table

@subsection Configuration options
Most options in this category correspond to a configuration file command.
Please refer to @ref{Configuration file} for detailed information.
@table @samp
@item -C @var{filename}
@itemx --file=@var{filename}
@opindex -C
@opindex --file
Use the given file instead of @code{~/.mpoprc} as the configuration file.
@itemx --host=@var{hostname}
@opindex --host
Use this POP3 server with settings from the command line; do not use any
configuration file data. This option disables loading of the configuration 
file. You cannot use both this option and account names on the command line.
@itemx --port=@var{number}
@opindex --port
Set the port number to connect to. @xref{port}.
@itemx --timeout=(off|@var{seconds})
@opindex --timeout
Set or unset a network timeout, in seconds. @xref{timeout}.
@anchor{--pipelining}
@itemx --pipelining=(auto|on|off)
@opindex --pipelining
Enable or disable POP3 pipelining. @xref{pipelining}.
@anchor{--auth}
@itemx --auth[=(on|@var{method})]
@opindex --auth
Set the authentication method to automatic (with "on") or manually choose an 
authentication method. @xref{auth}.
@anchor{--user}
@itemx --user=[@var{username}]
@opindex --user
Set or unset the user name for authentication. @xref{user}.
@itemx --tls[=(on|off)]
@opindex --tls
Enable or disable TLS/SSL. @xref{tls}.
@anchor{--tls-starttls}
@itemx --tls-starttls[=(on|off)]
@opindex --tls-starttls
Enable or disable STARTTLS for TLS encryption. @xref{tls_starttls}.
@anchor{--tls-trust-file}
@itemx --tls-trust-file=[@var{file}]
@opindex --tls-trust-file
Set or unset a trust file for TLS encryption. @xref{tls_trust_file}.
@anchor{--tls-key-file}
@itemx --tls-key-file=[@var{file}]
@opindex --tls-key-file
Set or unset a key file for TLS encryption. @xref{tls_key_file}.
@anchor{--tls-cert-file}
@itemx --tls-cert-file=[@var{file}]
@opindex --tls-cert-file
Set or unset a cert file for TLS encryption. @xref{tls_cert_file}.
@anchor{--tls-certcheck}
@itemx --tls-certcheck[=(on|off)]
@opindex --tls-certcheck
Enable or disable server certificate checks for TLS encryption.  
@xref{tls_certcheck}.
@anchor{--tls-force-sslv3}
@itemx --tls-force-sslv3=(on|off)]
@opindex --tls-force-sslv3
Force TLS/SSL version SSLv3. @xref{tls_force_sslv3}.
@end table

@subsection Options specific to mail retrieval mode
@table @samp
@anchor{--quiet}
@item -q
@itemx --quiet
@opindex -q
@opindex --quiet
Do not print progress information.
@anchor{--all-accounts}
@item -a
@itemx --all-accounts
@opindex -a
@opindex --all-accounts
Query all accounts in the configuration file.
@anchor{--auth-only}
@item -A
@itemx --auth-only
@opindex -A
@opindex --auth-only
Authenticate only; do not retrieve mail. Useful for SMTP-after-POP.
@anchor{--status-only}
@item -s
@itemx --status-only
@opindex -s
@opindex --status-only
Print number and size of mails in each account only; do not retrieve mail.
@anchor{--only-new}
@item -n
@itemx --only-new[=(on|off)]
@opindex --only-new
Process only new messages. @xref{only_new}.
@anchor{--keep}
@item -k
@itemx --keep[=(on|off)]
@opindex --keep
Do not delete mails from POP3 servers, regardless of other options or settings.
@xref{keep}.
@anchor{--killsize}
@itemx --killsize=(off|@var{size})
@opindex --killsize
Set or unset kill size. @xref{killsize}.
@anchor{--skipsize}
@itemx --skipsize=(off|@var{size})
@opindex --skipsize
Set or unset skip size. @xref{skipsize}.
@anchor{--filter}
@itemx --filter=[@var{command}]
@opindex --filter
Set a filter which will decide whether to retrieve, skip, or delete each mail by
investigating the mail's headers. @xref{filter}.
@anchor{--delivery}
@item --delivery=@var{method},@var{method_arguments@dots{}}
@opindex --delivery
How to deliver messages received from this account. @xref{delivery}. Note that a
comma is used instead of a blank to separate the method from its arguments.
@anchor{--uidls-file}
@itemx --uidls-file=@var{filename}
@opindex --uidls-file
File to store UIDLs in. @xref{uidls_file}.
@end table

@node POP3 features
@chapter POP3 features

@menu
* Transport Layer Security::		How to use TLS/SSL
* Authentication::			How to use authentication
* Pipelining::				How to use POP3 pipelining
* Defective POP3 servers::		Common defectives of POP3 servers
@end menu

@node Transport Layer Security
@section Transport Layer Security

Transport Layer Security (TLS) is a new name for Secure Socket Layer (SSL).
The TLS 1.0 protocol is an updated version of the SSL 3.0 protocol. TLS and
SSL mean the same thing.

Quoting from RFC2246 - the TLS 1.0 protocol specification:@*
"The TLS protocol provides communications privacy over the Internet.
The protocol allows client/server applications to communicate in a way that
is designed to prevent eavesdropping, tampering, or message forgery."

POP3 servers can use TLS in one of two modes:
@itemize
@item Immediately@*
This is known as POP3 tunneled through TLS. The default port for this mode is 
995 (pop3s). This is what most servers support, and is often simply called 
"POP3 with SSL".
@item Via the STARTTLS POP3 command@*
The POP3 session begins normally. The client sends the STLS command when it
wishes to begin TLS encryption. The default port for this mode is the default 
POP3 port: 110 (pop3).
@end itemize
mpop can switch between these modes with the @samp{tls_starttls} command (see 
@ref{tls_starttls}) command or the @samp{--tls-starttls} option (see 
@ref{--tls-starttls}).

When TLS is started, the server sends a certificate to identify itself. This
certificate contains information about the certificate owner, the certificate
issuer, and the activation and expiration times of the certificate.  This
information can be displayed in server information mode. 
@xref{Server information mode}.

To use TLS, it is required to either enable full server certificate verification
using the @samp{tls_trust_file} command or @samp{--tls-trust-file} option, or to
disable all certificate checks using @samp{tls_certcheck off} or 
@samp{--tls-certcheck=off}. WARNING: When certificate checks are disabled, 
TLS/SSL sessions are vulnerable to man-in-the-middle attacks!
See @ref{tls_trust_file}, @ref{--tls-trust-file}, @ref{tls_certcheck}, 
@ref{--tls-certcheck}.

If your system has a file that collects all system-wide trusted CA
certificates, it is easiest to just use this in the @samp{defaults} section of
your configuration file. On Debian-based systems, for example, the adequate
command would be @samp{tls_trust_file /etc/ssl/certs/ca-certificates.crt}.

But you can also find out manually which CA certificate you need to
trust. The following example works as of 2007-04-18.

For the Gmail POP server, you first issue the following command:
@example
$ mpop --serverinfo --host=pop.gmail.com --tls=on --tls-starttls=off \
  --tls-certcheck=off
@end example
The option @samp{--tls-starttls=off} is needed for Gmail, but may not be 
necessary for other servers. The option @samp{--tls-certcheck=off} allows
mpop to accept any certificate, so that it can print some information about it.

According to the output of this command, the issuer of the server certificate 
is "Equifax Secure Certificate Authority". This means that you have to trust the
Equifax CA to use full TLS security. You can download the appropriate
certificate from 
@url{http://www.geotrust.com/resources/root_certificates/index.asp} (Equifax was
bought by GeoTrust). The file you need for the @samp{tls_trust_file} command is
@file{Equifax_Secure_Certificate_Authority.cer}.

The following command should now succeed:
@example
$ mpop --serverinfo --host=pop.gmail.com --tls=on --tls-starttls=off \
  --tls-trust-file=Equifax_Secure_Certificate_Authority.cer
@end example

If the server requests it, the client can send a certificate, too. This allows
the server to verify the identity of the client. See the EXTERNAL mechanism in
@ref{Authentication}. The @samp{tls_key_file}/@samp{tls_cert_file} commands or
the @samp{--tls-key-file}/@samp{--tls-cert-file} options can be used to set a
client certificate. See @ref{tls_key_file}/@ref{--tls-key-file},
@ref{tls_cert_file}/@ref{--tls-cert-file}.
Note that GnuTLS will only send a client certificate if it matches one of the
CAs advertised by the server. If you set a client certificate but it is not send
to the server, probably does not match any CA that the server trusts.


@node Authentication
@section Authentication

POP3 servers require a client to authenticate itself before it is allowed to
retrieve mail. 

Multiple authentication methods exist. Most POP3 servers support only some of
them.  Some methods send authentication data in plain text (or nearly plain
text) to the server, and some others are vulnerable to attacks. These methods 
should only be used when TLS is active to prevent others from stealing the 
password. @xref{Transport Layer Security}.

By default, mpop chooses a method automatically, and it will never choose one 
that puts the authentication data at risk. See below for details.

mpop supports the following authentication methods:
@itemize
@item @samp{USER}@*
This authentication method needs a user name and a password. 
Both are send in plain text. All POP3 servers support this authentication 
method.
@item @samp{PLAIN}@*
This authentication method needs a user name and a password. 
Both are send in BASE64 encoding, which can be easily decoded to plain text.
@item @samp{APOP}@*
This authentication method needs a user name and a password. 
The authentication data is not sent in plain text, but APOP is vulnerable to 
man-in-the-middle attacks. This method should not be used unless TLS is active.
@item @samp{CRAM-MD5}@*
This authentication method needs a user name and a password. 
The authentication data is not sent in plain text, which means this method can 
safely be used without TLS.
@item @samp{DIGEST-MD5}@*
This authentication method needs a user name and a password. 
The authentication data is not sent in plain text, which means this method can 
safely be used without TLS.
@item @samp{GSSAPI}@*
This authentication method needs a user name. The Kerberos framework takes care
of secure authentication, therefore this method can safely be used without TLS.
@item @samp{EXTERNAL}@*
This is a special authentication method: The actual authentication happens
outside of the POP3 protocol, typically by sending a TLS client certificate
(see @ref{Transport Layer Security}).@*
The EXTERNAL method merely confirms that this authentication succeeded for the
given user (or, if no user name is given, confirms that authentication
succeeded). Thus it may not be necessary for authentication to use this method,
and if the server does not support the EXTERNAL method, this does not mean that
it does not support authentication with TLS client certificates.@*
This authentication method is not chosen automatically; you have to request it
manually.@*
Note: (SMTP) Sendmail 8.12.11 advertises the EXTERNAL mechanism only after a
TLS client certificate has been send. It seems to ignore the optional user
name.  Does anyone know more about this?
@item @samp{LOGIN}@*
This is a non-standard authentication method similar to (but worse than) PLAIN.
It needs a user name and a password, both of which are send in BASE64 encoding, 
which can be easily decoded to plain text.
@item @samp{NTLM}@*
This is an obscure non-standard authentication method. It needs a user name and
a password and in some cases a special domain parameter (see @ref{ntlmdomain}). 
The authentication data is not send in plain text, but since NTLM is not an open
standard, it should be considered broken and insecure.
@end itemize

It depends on the underlying authentication library and its version whether a
particular method is supported or not. Use @option{--version} to find out which
methods are supported by your version of mpop.

Authentication data can be set with the @samp{user} and @samp{password} commands
or with the @samp{--user} option. See @ref{user}, @ref{password}, @ref{--user}.
If no password is set but one is needed during authentication, mpop will try to
find it in @code{~/.netrc}, and if that fails, mpop will prompt you for it.

The authentication method can be chosen with the @samp{auth} command or 
@samp{--auth} option, but it is usually sufficient to just use the @samp{on} 
argument to let mpop choose the method itself. See @ref{auth}, @ref{--auth}.

If mpop chooses the method itself, it will never choose an insecure method.
If TLS is active, all methods are considered secure in this context, because the
connection to the server is protected by TLS. If TLS is not active, only the
CRAM-MD5, DIGEST-MD5, and GSSAPI methods are considered secure in this context,
because all the others methods put the authentication data at risk.

If you really want to risk your authentication data, you have to force mpop to
do that by manually setting the authentication method while TLS is off.

@node Pipelining
@section Pipelining

A POP3 client that sends multiple POP3 commands at once to a POP3 server before
starting to read the server's answers is using POP3 pipelining. Since the client
does not have to wait for the server's answer before sending the next command, 
and the server does not have to wait for the next command from the client, 
pipelining can speed up a POP3 session substantially.

Pipelining in mpop works by sending up to @samp{PIPELINE_MAX} commands to the
server, then begin to read its answers, and refill the command pipeline when the
number of unanswered commands drops to @samp{PIPELINE_MIN}. @samp{PIPELINE_MIN}
and @samp{PIPELINE_MAX} are compile time constants.

By default, mpop will enable pipelining automatically if the server supports
the CAPA command and advertizes the pipelining capability, and disable it for 
all other servers. @xref{Server information mode}.

You can change this behaviour with the @samp{pipelining} command or
@samp{--pipelining} option. See @ref{pipelining}, @ref{--pipelining}. It is
always safe to disable pipelining. It is not recommended to force pipelining
for servers that are not known to support it.

@node Defective POP3 servers
@section Defective POP3 servers

Some POP3 servers still do not support the UIDL command. In this case, mpop 
cannot recognize messages that were already successfully retrieved, and will
treat all messages as new. Use the @samp{--serverinfo} option to find out if a 
server supports the UIDL command.

Some POP3 servers count end-of-line characters as two bytes (CRLF) instead 
of one (LF), so that the size of a mail as reported by the POP3 server is 
slightly larger than the actual size. This has the following consequences:
The size filters are not accurate. Do not rely on exact size filtering.
The progress output may display inaccurate (slightly too low) percentage values
for the first mail retrieved from a POP3 server. mpop will detect this after
the first mail has been read and will display corrected values for subsequent
mails.


@node Mail retrieval mode
@chapter Mail retrieval mode

In this mode, mpop retrieves mail from one or more POP3 servers. It delivers 
each of them using the method that was given with the @samp{delivery} command 
or @samp{--delivery} option. See @ref{delivery}, @ref{--delivery}.

While retrieving the mail, mpop displays approximate progress information,
which can be turned off with the @samp{--quiet} option; see @ref{--quiet}.

If the delivery succeeded, the mail is deleted from the POP3 server by default.
The @samp{keep} command and @samp{--keep} option can prevent the deletion of
mails; see @ref{keep}, @ref{--keep}.

@emph{Important note:} Some POP3 servers will delete mails without any user
interaction. See EXPIRE in @ref{Server information mode}. mpop can do nothing
about that.

If you don't want to download certain mails, but skip them or delete them 
directly, you can do filtering based on the mail headers. @xref{Filtering}.

If you just want to know if you have new mails (and how many), use the
@samp{--status-only} option. @xref{--status-only}.

If you just want to authenticate to the POP3 server, but don't want to look at
your mails, use the @samp{--auth-only} option. @xref{--auth-only}. This can be
useful for sending mail through SMTP servers that require SMTP-after-POP 
(aka POP-before-SMTP).

Before mpop delivers a mail, it prepends a Received header to it. This is 
necessary if the delivery method transmits the mail to an SMTP server, for 
example. mpop does not change the contents of the mail in any other way.


@node Server information mode
@chapter Server information mode

In server information mode, mpop prints as much information about the POP3 
server as it can get and then exits.

The POP3 features that can be detected are:
@itemize
@item IMPLEMENTATION@*
The implementation string of the POP3 server.
@item CAPA@*
Support for the POP3 CAPA command. The server sends a list of its capabilities
in response to this command.
@item PIPELINING@*
Support for POP3 pipelining. @xref{Pipelining}.
@item TOP@*
Support for the POP3 TOP command. This is needed for header based filtering to
work. @xref{Filtering}.
@item UIDL@*
Support for the POP3 UIDL command. This is needed to distinguish between new and
already retrieved messages.
@item LOGIN-DELAY@*
The minimum time between two POP3 sessions. The server may refuse a POP3 session
if the last one was active less than this time period ago.
@item EXPIRE@*
The time after which old mails are deleted by the POP3 server.
@itemize
@item NEVER: The POP3 server will not delete mail without the user requesting 
it.
@item 0: The POP3 server will not keep mails; all mails will be deleted after
they have been downloaded, regardless of the user's wishes.
@item @var{number}: The number of days that the POP3 server will keep mails
before deleting them without user interaction.
@end itemize
@item STARTTLS@*
@xref{Transport Layer Security}.
@item AUTH@*
@xref{Authentication}.
@item RESP-CODES@*
If authentication fails and the POP3 server issues an error message beginning 
with a square bracket, this message will include additional information about
the source of the error:
@itemize
@item @code{[LOGIN-DELAY]}: The login delay period hast not yet expired.
@item @code{[IN-USE]}: Authentication succeeded but the mailbox is currently 
in use, possibly by another POP3 session.
@end itemize
@item AUTH-RESP-CODE@*
If authentication fails and the POP3 server issues an error message beginning 
with a square bracket, this message will include additional information about
the source of the error:
@itemize
@item @code{[LOGIN-DELAY]}: The login delay period hast not yet expired.
@item @code{[IN-USE]}: Authentication succeeded but the mailbox is currently 
in use, possibly by another POP3 session.
@item @code{[SYS/TEMP]}: Temporary system failure; try again later.
@item @code{[SYS/PERM]}: Permanent system failure; ask the administrator.
@item @code{[AUTH]}: Incorrect user name or password or some other problem with
the user's credentials.
@end itemize
@end itemize

If TLS is activated for server information mode, the following information will
be printed about the POP3 server's TLS certificate (if available):
@itemize
@item Owner information
@itemize
@item Common Name
@item Organization
@item Organizational unit
@item Locality
@item State or Province
@item Country
@end itemize
@item Issuer information
@itemize 
@item Common Name
@item Organization
@item Organizational unit
@item Locality
@item State or Province
@item Country
@end itemize
@item General
@itemize 
@item Activation time
@item Expiration time
@item SHA1 fingerprint
@item MD5 fingerprint
@end itemize
@end itemize


@node Filtering
@chapter Filtering

There are three filtering commands available. They will be executed in the 
following order:

@enumerate
@item @samp{killsize}
@item @samp{skipsize}
@item @samp{filter}
@end enumerate

If a filtering command applies to a mail, the remaining filters will not be 
executed.

The POP3 server must support the POP3 TOP command 
(@ref{Server information mode}) for filtering with a filter command:
It is used to read the mail headers (plus the blank line separating the header
from the body) and pipe them to the filter command.

Note that, if the filter decides that the mail should be retrieved, the complete
mail has to be downloaded, including the headers, so the headers will be 
downloaded twice. This is because there's no way in POP3 to download just
the mail body. Sometimes this overhead surpasses the savings of the filtering.

The filter command looks at the mail headers and signals with its exit code what
mpop should do with the mail:
@itemize
@item 0: retrieve the mail
@item 1: delete the mail; do not retrieve it
@item 2: skip the mail; do not retrieve it
@end itemize
Return codes greater than or equal to 3 mean that an error occurred. 
The @code{sysexits.h} error codes may be used to give information about the kind
of the error, but this is optional.

Since the filter command will be passed to a shell, you can use all shell 
command constructs in addition to just calling a script or program. This allows
flexible filter constructs. @xref{Filtering with SpamAssassin}.

Some POP3 servers count end-of-line characters as two bytes (CRLF) instead of
one (LF), so that the size of a mail as reported by the POP3 server is slightly
larger than the actual size. The filters use the size values reported by the 
POP3 server since they cannot know the actual size in advance. Thus you cannot
rely on @emph{exact} size filtering.


@node Examples
@chapter Examples

@menu
* A configuration file::
* Filtering with SpamAssassin::
@end menu

@node A configuration file
@section A configuration file

@example
#
# Default values for all accounts.
#

defaults
# Activate TLS.
tls on
# Enable full TLS certificate checks.
tls_trust_file /etc/ssl/certs/ca-certificates.crt
# Use the POP3-over-TLS variant instead of the STARTTLS variant.
# This is also known as "POP3 with SSL". Most servers support this.
tls_starttls off
# Use the procmail mail delivery agent.
delivery mda "/usr/bin/procmail -f '%F' -d $USER"

# For Sendmail:
#delivery mda "/usr/sbin/sendmail -oi -oem -f '%F' -- $USER"
# For msmtp (delivery via SMTP):
#delivery mda "/usr/bin/msmtp --host=localhost --from='%F' -- $USER"
# Delivery to a maildir folder:
#delivery maildir ~/Mail/incoming
# Delivery to a MBOX mail folder:
#delivery mbox ~/Mail/new


# 
# Two pop3 mailboxes at the provider.
#

account provider1
host mx.provider.example
user john_smith
password secret

# Copy the settings from the previous account, and only override the
# settings that differ.
account provider2 : provider1
user joey
password secret2


# 
# A freemail service.
#

account freemail
host pop.freemail.example
user 1238476
password pass

# The service runs SpamAssassin, so test each mail for the "X-Spam-Status: Yes"
# header, and delete all mails with this header before downloading them.
filter   if [ "`grep "^X-Spam-Status: Yes"`" ]; then exit 1; else exit 0; fi


# 
# Set a default account (optional).
#

account default : provider1
@end example


@node Filtering with SpamAssassin
@section Filtering with SpamAssassin

Use the following to delete all mails that SpamAssassin classifies as spam:
@example
filter "/path/to/spamc -c > /dev/null"
@end example
Since no message body is passed to SpamAssassin, you should disable all 
body-specific tests in the SpamAssassin configuration file; for example set
use_bayes 0.

If your mail provider runs SpamAssassin for you, you just have to check for 
the result. The following script can do that when used as an mpop filter:
@example
#!/bin/sh
if [ "`grep "^X-Spam-Status: Yes"`" ]; then
    exit 1  # kill this message
else
    exit 0  # proceed normally
fi
@end example
Since the filter command is passed to a shell, all shell constructs are usable,
so you can also use this directly:
@example
filter if [ "`grep "^X-Spam-Status: Yes"`" ]; then exit 1; else exit 0; fi
@end example


@node Development
@chapter Development

The homepage of mpop is @url{http://mpop.sourceforge.net/};
the SourceForge project page is at @url{http://sourceforge.net/projects/mpop/}.

The mailing lists @code{mpop-users} can be accessed from the project page.

Please send any questions, suggestions, and bug reports either to the mailing
list or to Martin Lambers (@email{marlam@@marlam.de}, OpenPGP key: 
@url{http://www.marlam.de/key.txt}).
If you send a bug report, please include the output of @code{mpop --version}.


@bye
